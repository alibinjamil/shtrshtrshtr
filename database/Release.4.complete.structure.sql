/**************************************************************************
-- -Generated by xSQL SDK for Schema Comparison and Synchronization
-- -Date/Time: March 27, 2010 13:16:34

-- -Summary:
    Contains the T-SQL script that makes the database 
    .\SQLEXPRESS.shoprelease the same as the database .\SQLEXPRESS.shoptest

-- -Action:
    Execute this script on .\SQLEXPRESS.shoprelease

-- -SQL Server version: 10.0.1600
**************************************************************************/

BEGIN TRANSACTION
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
	SET QUOTED_IDENTIFIER ON
	SET ANSI_NULLS ON
	SET ANSI_PADDING ON
	SET ANSI_WARNINGS ON
	SET ARITHABORT ON
	SET NUMERIC_ROUNDABORT OFF
	SET CONCAT_NULL_YIELDS_NULL ON
	SET XACT_ABORT ON
COMMIT TRANSACTION
GO

IF EXISTS (select * from tempdb..sysobjects where id = OBJECT_ID('tempdb..#ErrorLog')) 
	DROP TABLE #ErrorLog 
CREATE TABLE #ErrorLog 
( pkid [int] IDENTITY(1,1) NOT NULL, errno [int] NOT NULL, errdescr [varchar](100) NULL )
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[un_email_queue] (
	[queue_id] [int] IDENTITY (1,1) NOT NULL,
	[log_time] [datetime] NOT NULL,
	[num_of_tries] [tinyint] NOT NULL,
	[from_name] [varchar](200) COLLATE Latin1_General_CI_AS NOT NULL,
	[from_address] [varchar](200) COLLATE Latin1_General_CI_AS NOT NULL,
	[to_names] [varchar](200) COLLATE Latin1_General_CI_AS NOT NULL,
	[to_addresses] [varchar](200) COLLATE Latin1_General_CI_AS NOT NULL,
	[subject] [varchar](200) COLLATE Latin1_General_CI_AS NOT NULL,
	[body] varchar(max) COLLATE Latin1_General_CI_AS NOT NULL,
	[sent_time] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add table dbo.un_email_queue')
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER TABLE [dbo].[un_email_queue] ADD 
	CONSTRAINT [DF_un_email_log_log_time] DEFAULT (getdate()) FOR [log_time]
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.EmailQueueDelete
(
	@Original_queue_id int,
	@Original_log_time datetime,
	@Original_num_of_tries tinyint,
	@Original_from_name varchar(200),
	@Original_from_address varchar(200),
	@Original_to_names varchar(200),
	@Original_to_addresses varchar(200),
	@Original_subject varchar(200),
	@IsNull_sent_time Int,
	@Original_sent_time datetime
)
AS
	SET NOCOUNT OFF;
DELETE FROM [un_email_queue] WHERE (([queue_id] = @Original_queue_id) AND ([log_time] = @Original_log_time) AND ([num_of_tries] = @Original_num_of_tries) AND ([from_name] = @Original_from_name) AND ([from_address] = @Original_from_address) AND ([to_names] = @Original_to_names) AND ([to_addresses] = @Original_to_addresses) AND ([subject] = @Original_subject) AND ((@IsNull_sent_time = 1 AND [sent_time] IS NULL) OR ([sent_time] = @Original_sent_time)))
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.EmailQueueDelete')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.EmailQueueInsert
(
	@log_time datetime,
	@num_of_tries tinyint,
	@from_name varchar(200),
	@from_address varchar(200),
	@to_names varchar(200),
	@to_addresses varchar(200),
	@subject varchar(200),
	@body varchar(MAX),
	@sent_time datetime
)
AS
	SET NOCOUNT OFF;
INSERT INTO [un_email_queue] ([log_time], [num_of_tries], [from_name], [from_address], [to_names], [to_addresses], [subject], [body], [sent_time]) VALUES (@log_time, @num_of_tries, @from_name, @from_address, @to_names, @to_addresses, @subject, @body, @sent_time);
	
SELECT queue_id, log_time, num_of_tries, from_name, from_address, to_names, to_addresses, subject, body, sent_time FROM un_email_queue WHERE (queue_id = SCOPE_IDENTITY())
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.EmailQueueInsert')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[EmailQueueSelect]
AS
	SET NOCOUNT ON;
SELECT        un_email_queue.*
FROM            un_email_queue
WHERE sent_time is null
and num_of_tries < 5
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.EmailQueueSelect')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.EmailQueueUpdate
(
	@log_time datetime,
	@num_of_tries tinyint,
	@from_name varchar(200),
	@from_address varchar(200),
	@to_names varchar(200),
	@to_addresses varchar(200),
	@subject varchar(200),
	@body varchar(MAX),
	@sent_time datetime,
	@Original_queue_id int,
	@Original_log_time datetime,
	@Original_num_of_tries tinyint,
	@Original_from_name varchar(200),
	@Original_from_address varchar(200),
	@Original_to_names varchar(200),
	@Original_to_addresses varchar(200),
	@Original_subject varchar(200),
	@IsNull_sent_time Int,
	@Original_sent_time datetime,
	@queue_id int
)
AS
	SET NOCOUNT OFF;
UPDATE [un_email_queue] SET [log_time] = @log_time, [num_of_tries] = @num_of_tries, [from_name] = @from_name, [from_address] = @from_address, [to_names] = @to_names, [to_addresses] = @to_addresses, [subject] = @subject, [body] = @body, [sent_time] = @sent_time WHERE (([queue_id] = @Original_queue_id) AND ([log_time] = @Original_log_time) AND ([num_of_tries] = @Original_num_of_tries) AND ([from_name] = @Original_from_name) AND ([from_address] = @Original_from_address) AND ([to_names] = @Original_to_names) AND ([to_addresses] = @Original_to_addresses) AND ([subject] = @Original_subject) AND ((@IsNull_sent_time = 1 AND [sent_time] IS NULL) OR ([sent_time] = @Original_sent_time)));
	
SELECT queue_id, log_time, num_of_tries, from_name, from_address, to_names, to_addresses, subject, body, sent_time FROM un_email_queue WHERE (queue_id = @queue_id)
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.EmailQueueUpdate')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[EmailQueueUpdateNumOfTries]
AS
	SET NOCOUNT OFF;
UPDATE [un_email_queue] SET [num_of_tries] = [num_of_tries] + 1
where sent_time is null;
	

GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.EmailQueueUpdateNumOfTries')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER TABLE [dbo].[un_email_queue] ADD 
	CONSTRAINT [PK_un_email_log] PRIMARY KEY CLUSTERED 
	(
		[queue_id]
	) ON [PRIMARY];
GO

IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add primary key dbo.un_email_queue.PK_un_email_log')
END
GO
IF EXISTS (Select * from #ErrorLog)
BEGIN
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
END
ELSE
BEGIN
	IF @@TRANCOUNT>0 COMMIT TRANSACTION
END
IF EXISTS (Select * from #ErrorLog)
BEGIN
	Print 'Database synchronization script failed'
	GOTO QuitWithErrors
END
ELSE
BEGIN
	Print 'Database synchronization completed successfully'
END



QuitWithErrors:



/**************************************************************************
-- -Generated by xSQL SDK for Schema Comparison and Synchronization
-- -Date/Time: February 19, 2010 11:19:38

-- -Summary:
    Contains the T-SQL script that makes the database 
    .\SQLEXPRESS.Blank the same as the database .\SQLEXPRESS.ShoppingTrolley

-- -Action:
    Execute this script on .\SQLEXPRESS.Blank

-- -SQL Server version: 10.0.1600
**************************************************************************/

BEGIN TRANSACTION
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
	SET QUOTED_IDENTIFIER ON
	SET ANSI_NULLS ON
	SET ANSI_PADDING ON
	SET ANSI_WARNINGS ON
	SET ARITHABORT ON
	SET NUMERIC_ROUNDABORT OFF
	SET CONCAT_NULL_YIELDS_NULL ON
	SET XACT_ABORT ON
COMMIT TRANSACTION
GO

IF EXISTS (select * from tempdb..sysobjects where id = OBJECT_ID('tempdb..#ErrorLog')) 
	DROP TABLE #ErrorLog 
CREATE TABLE #ErrorLog 
( pkid [int] IDENTITY(1,1) NOT NULL, errno [int] NOT NULL, errdescr [varchar](100) NULL )
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[un_call_me_page] (
	[call_me_id] [int] IDENTITY (1,1) NOT NULL,
	[name_forename] [varchar](60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[name_surname] [varchar](60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[telephone] [varchar](30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[cell_number] [varchar](30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[email] [varchar](60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[company_name] [varchar](60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[company_website] [varchar](60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[postal_adress] [varchar](255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[postal_code] [varchar](9) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[comments] [varchar](1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[flg_view_demo] [bit] NOT NULL,
	[flg_receive_emails] [bit] NULL
) ON [PRIMARY]
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add table dbo.un_call_me_page')
END
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[un_call_me_products] (
	[call_me_id] [int] NOT NULL,
	[product_name] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
) ON [PRIMARY]
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add table dbo.un_call_me_products')
END
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[un_entity_details_core] (
	[entity_id] [int] IDENTITY (1,1) NOT NULL,
	[entity_uid] [char](36) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[verification_code] [char](36) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[flg_receive_mails] [bit] NOT NULL,
	[flg_deleted] [bit] NOT NULL,
	[flg_entity_on_hold] [bit] NOT NULL,
	[entity_approved_status] [int] NULL,
	[entity_pymt_type] [int] NULL,
	[name_long] [varchar](60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[name_title] [varchar](7) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[name_initials] [varchar](3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[name_forename] [varchar](60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[name_surname] [varchar](60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[name_job_title] [varchar](255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[email] [varchar](60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[logon_enable] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[enable_reminder_question_id] [tinyint] NULL,
	[enable_reminder_custom_question] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[enable_reminder_question_answer] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[entity_details] [varchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[flg_verified] [bit] NOT NULL,
	[flg_enabled] [bit] NOT NULL,
	[login_attempts] [int] NULL,
	[flg_locked] [bit] NOT NULL,
	[locked_reason] [varchar](255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[created_by] [int] NULL,
	[date_created] [datetime] NOT NULL,
	[last_amended_by] [int] NULL,
	[date_last_amended] [datetime] NULL,
	[entity_type] [text] COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add table dbo.un_entity_details_core')
END
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[un_entity_details_multi_add] (
	[address_id] [int] IDENTITY (1,1) NOT NULL,
	[flg_deleted] [bit] NOT NULL,
	[entity_id] [int] NOT NULL,
	[flg_same_as_customer] [bit] NOT NULL,
	[flg_same_as_billing] [bit] NOT NULL,
	[multi_add_type] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[address_name] [varchar](255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[address_no] [varchar](32) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[address_line1] [varchar](60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[address_line2] [varchar](60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[address_line3] [varchar](60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[address_line4] [varchar](60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[address_line5] [varchar](60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[address_post_code] [varchar](9) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[address_full] varchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[telephone1] [varchar](30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[telephone2] [varchar](30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[fax] [varchar](30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[cell_number] [varchar](30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[created_by] [int] NULL,
	[date_created] [datetime] NOT NULL,
	[last_amended_by] [int] NULL,
	[date_last_amended] [datetime] NULL,
	[town] [varchar](60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[county] [varchar](60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[country] [varchar](60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add table dbo.un_entity_details_multi_add')
END
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[un_exchange_rates] (
	[country_code] [char](3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[rate_time] [datetime] NOT NULL,
	[exchange_rate] [float] NOT NULL
) ON [PRIMARY]
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add table dbo.un_exchange_rates')
END
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[un_product_details] (
	[product_detail_id] [int] IDENTITY (1,1) NOT NULL,
	[product_id] [int] NOT NULL,
	[product_detail] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[mandatory] [bit] NOT NULL,
	[sort_order] [int] NOT NULL
) ON [PRIMARY]
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add table dbo.un_product_details')
END
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[un_product_prices] (
	[version_id] [int] NOT NULL,
	[product_detail_id] [int] NOT NULL,
	[price] [float] NULL,
	[text] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
) ON [PRIMARY]
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add table dbo.un_product_prices')
END
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[un_product_versions] (
	[version_id] [int] IDENTITY (1,1) NOT NULL,
	[product_id] [int] NOT NULL,
	[name] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[min_users] [tinyint] NOT NULL,
	[min_months] [tinyint] NULL
) ON [PRIMARY]
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add table dbo.un_product_versions')
END
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[un_products] (
	[product_id] [int] IDENTITY (1,1) NOT NULL,
	[name] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[description] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[short_name] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
) ON [PRIMARY]
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add table dbo.un_products')
END
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[un_wish_list] (
	[wish_list_id] [int] IDENTITY (1,1) NOT NULL,
	[user_id] [int] NOT NULL,
	[product_id] [int] NOT NULL,
	[quantity] [tinyint] NOT NULL,
	[price] [float] NOT NULL,
	[total] [float] NOT NULL
) ON [PRIMARY]
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add table dbo.un_wish_list')
END
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER TABLE [dbo].[un_entity_details_multi_add] ADD 
	CONSTRAINT [DF_adddress_flg_deleted] DEFAULT ((0)) FOR [flg_deleted]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER TABLE [dbo].[un_entity_details_multi_add] ADD 
	CONSTRAINT [DF_adddress_flg_same_as_billing] DEFAULT ((0)) FOR [flg_same_as_billing]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER TABLE [dbo].[un_entity_details_multi_add] ADD 
	CONSTRAINT [DF_adddress_flg_same_as_customer] DEFAULT ((0)) FOR [flg_same_as_customer]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER TABLE [dbo].[un_entity_details_core] ADD 
	CONSTRAINT [DF_test_flg_deleted] DEFAULT ((0)) FOR [flg_deleted]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER TABLE [dbo].[un_entity_details_core] ADD 
	CONSTRAINT [DF_test_flg_enabled] DEFAULT ((0)) FOR [flg_enabled]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER TABLE [dbo].[un_entity_details_core] ADD 
	CONSTRAINT [DF_test_flg_entity_on_hold] DEFAULT ((0)) FOR [flg_entity_on_hold]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER TABLE [dbo].[un_entity_details_core] ADD 
	CONSTRAINT [DF_test_flg_locked] DEFAULT ((0)) FOR [flg_locked]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER TABLE [dbo].[un_entity_details_core] ADD 
	CONSTRAINT [DF_test_flg_verified] DEFAULT ((0)) FOR [flg_verified]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER TABLE [dbo].[un_call_me_page] ADD 
	CONSTRAINT [DF_un_call_me_page_flg_receive_emails] DEFAULT ((0)) FOR [flg_receive_emails]
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.CustomerDelete
(
	@Original_entity_id int
)
AS
	SET NOCOUNT OFF;
DELETE FROM [un_entity_details_core] WHERE (([entity_id] = @Original_entity_id))
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.CustomerDelete')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[CustomerInsert]
(
	@flg_deleted bit,
	@flg_entity_on_hold bit,
	@flg_receive_mails bit,
	@entity_approved_status int,
	@entity_pymt_type int,
	@name_long varchar(60),
	@name_title varchar(7),
	@name_initials varchar(3),
	@name_forename varchar(60),
	@name_surname varchar(60),
	@name_job_title varchar(255),
	@email varchar(60),
	@logon_enable varchar(50),
	@enable_reminder_question_id tinyint,
	@enable_reminder_custom_question varchar(50),
	@enable_reminder_question_answer varchar(50),
	@entity_details varchar(200),
	@flg_verified bit,
	@flg_enabled bit,
	@login_attempts int,
	@flg_locked bit,
	@locked_reason varchar(255),
	@created_by int,
	@date_created datetime,
	@last_amended_by int,
	@date_last_amended datetime,
	@entity_type text
)
AS
	SET NOCOUNT OFF;
INSERT INTO [un_entity_details_core] ([entity_uid],[verification_code],[flg_receive_mails],[flg_deleted], [flg_entity_on_hold], [entity_approved_status], [entity_pymt_type], [name_long], [name_title], [name_initials], [name_forename], [name_surname], [name_job_title], [email], [logon_enable], [enable_reminder_question_id], [enable_reminder_custom_question], [enable_reminder_question_answer], [entity_details], [flg_verified], [flg_enabled], [login_attempts], [flg_locked], [locked_reason], [created_by], [date_created], [last_amended_by], [date_last_amended], [entity_type])
 VALUES (newid(),newid(),@flg_receive_mails, @flg_deleted, @flg_entity_on_hold, @entity_approved_status, @entity_pymt_type, @name_long, @name_title, @name_initials, @name_forename, @name_surname, @name_job_title, @email, @logon_enable, @enable_reminder_question_id, @enable_reminder_custom_question, @enable_reminder_question_answer, @entity_details, @flg_verified, @flg_enabled, @login_attempts, @flg_locked, @locked_reason, @created_by, @date_created, @last_amended_by, @date_last_amended, @entity_type);
	
SELECT * FROM un_entity_details_core WHERE (entity_id = SCOPE_IDENTITY())
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.CustomerInsert')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.CustomerSelect
AS
	SET NOCOUNT ON;
SELECT        un_entity_details_core.*
FROM            un_entity_details_core
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.CustomerSelect')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[CustomerSelectByUID]
	@uid char(36)
AS
	SET NOCOUNT ON;
SELECT        un_entity_details_core.*
FROM            un_entity_details_core
WHERE			entity_uid = @uid

GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.CustomerSelectByUID')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.CustomerUpdate
(
	@flg_deleted bit,
	@flg_entity_on_hold bit,
	@entity_approved_status int,
	@entity_pymt_type int,
	@name_long varchar(60),
	@name_title varchar(7),
	@name_initials varchar(3),
	@name_forename varchar(60),
	@name_surname varchar(60),
	@name_job_title varchar(255),
	@email varchar(60),
	@logon_enable varchar(50),
	@enable_reminder_question_id tinyint,
	@enable_reminder_custom_question varchar(50),
	@enable_reminder_question_answer varchar(50),
	@entity_details varchar(200),
	@flg_verified bit,
	@flg_enabled bit,
	@login_attempts int,
	@flg_locked bit,
	@locked_reason varchar(255),
	@created_by int,
	@date_created datetime,
	@last_amended_by int,
	@date_last_amended datetime,
	@entity_type text,
	@Original_entity_id int,
	@entity_id int
)
AS
	SET NOCOUNT OFF;
UPDATE [un_entity_details_core] SET [flg_deleted] = @flg_deleted, [flg_entity_on_hold] = @flg_entity_on_hold, [entity_approved_status] = @entity_approved_status, [entity_pymt_type] = @entity_pymt_type, [name_long] = @name_long, [name_title] = @name_title, [name_initials] = @name_initials, [name_forename] = @name_forename, [name_surname] = @name_surname, [name_job_title] = @name_job_title, [email] = @email, [logon_enable] = @logon_enable, [enable_reminder_question_id] = @enable_reminder_question_id, [enable_reminder_custom_question] = @enable_reminder_custom_question, [enable_reminder_question_answer] = @enable_reminder_question_answer, [entity_details] = @entity_details, [flg_verified] = @flg_verified, [flg_enabled] = @flg_enabled, [login_attempts] = @login_attempts, [flg_locked] = @flg_locked, [locked_reason] = @locked_reason, [created_by] = @created_by, [date_created] = @date_created, [last_amended_by] = @last_amended_by, [date_last_amended] = @date_last_amended, [entity_type] = @entity_type WHERE (([entity_id] = @Original_entity_id));
	
SELECT entity_id, flg_deleted, flg_entity_on_hold, entity_approved_status, entity_pymt_type, name_long, name_title, name_initials, name_forename, name_surname, name_job_title, email, logon_enable, enable_reminder_question_id, enable_reminder_custom_question, enable_reminder_question_answer, entity_details, flg_verified, flg_enabled, login_attempts, flg_locked, locked_reason, created_by, date_created, last_amended_by, date_last_amended, entity_type FROM un_entity_details_core WHERE (entity_id = @entity_id)
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.CustomerUpdate')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[VerifyCustomer]
(
	@entity_id int
)
AS
	SET NOCOUNT OFF;
UPDATE [un_entity_details_core] SET [flg_verified] = 1,[verification_code] = NULL WHERE (([entity_id] = @entity_id));
	

GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.VerifyCustomer')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.AddressDelete
(
	@Original_address_id int
)
AS
	SET NOCOUNT OFF;
DELETE FROM [un_entity_details_multi_add] WHERE (([address_id] = @Original_address_id))
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.AddressDelete')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.AddressInsert
(
	@flg_deleted bit,
	@entity_id int,
	@flg_same_as_customer bit,
	@flg_same_as_billing bit,
	@multi_add_type varchar(10),
	@address_name varchar(255),
	@address_no varchar(32),
	@address_line1 varchar(60),
	@address_line2 varchar(60),
	@address_line3 varchar(60),
	@address_line4 varchar(60),
	@address_line5 varchar(60),
	@address_post_code varchar(9),
	@address_full varchar(MAX),
	@telephone1 varchar(30),
	@telephone2 varchar(30),
	@fax varchar(30),
	@cell_number varchar(30),
	@created_by int,
	@date_created datetime,
	@last_amended_by int,
	@date_last_amended datetime,
	@town varchar(60),
	@county varchar(60),
	@country varchar(60)
)
AS
	SET NOCOUNT OFF;
INSERT INTO [un_entity_details_multi_add] ([flg_deleted], [entity_id], [flg_same_as_customer], [flg_same_as_billing], [multi_add_type], [address_name], [address_no], [address_line1], [address_line2], [address_line3], [address_line4], [address_line5], [address_post_code], [address_full], [telephone1], [telephone2], [fax], [cell_number], [created_by], [date_created], [last_amended_by], [date_last_amended], [town], [county], [country]) VALUES (@flg_deleted, @entity_id, @flg_same_as_customer, @flg_same_as_billing, @multi_add_type, @address_name, @address_no, @address_line1, @address_line2, @address_line3, @address_line4, @address_line5, @address_post_code, @address_full, @telephone1, @telephone2, @fax, @cell_number, @created_by, @date_created, @last_amended_by, @date_last_amended, @town, @county, @country);
	
SELECT address_id, flg_deleted, entity_id, flg_same_as_customer, flg_same_as_billing, multi_add_type, address_name, address_no, address_line1, address_line2, address_line3, address_line4, address_line5, address_post_code, address_full, telephone1, telephone2, fax, cell_number, created_by, date_created, last_amended_by, date_last_amended, town, county, country FROM un_entity_details_multi_add WHERE (address_id = SCOPE_IDENTITY())
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.AddressInsert')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.AddressSelect
AS
	SET NOCOUNT ON;
SELECT        un_entity_details_multi_add.*
FROM            un_entity_details_multi_add
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.AddressSelect')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.AddressUpdate
(
	@flg_deleted bit,
	@entity_id int,
	@flg_same_as_customer bit,
	@flg_same_as_billing bit,
	@multi_add_type varchar(10),
	@address_name varchar(255),
	@address_no varchar(32),
	@address_line1 varchar(60),
	@address_line2 varchar(60),
	@address_line3 varchar(60),
	@address_line4 varchar(60),
	@address_line5 varchar(60),
	@address_post_code varchar(9),
	@address_full varchar(MAX),
	@telephone1 varchar(30),
	@telephone2 varchar(30),
	@fax varchar(30),
	@cell_number varchar(30),
	@created_by int,
	@date_created datetime,
	@last_amended_by int,
	@date_last_amended datetime,
	@town varchar(60),
	@county varchar(60),
	@country varchar(60),
	@Original_address_id int,
	@address_id int
)
AS
	SET NOCOUNT OFF;
UPDATE [un_entity_details_multi_add] SET [flg_deleted] = @flg_deleted, [entity_id] = @entity_id, [flg_same_as_customer] = @flg_same_as_customer, [flg_same_as_billing] = @flg_same_as_billing, [multi_add_type] = @multi_add_type, [address_name] = @address_name, [address_no] = @address_no, [address_line1] = @address_line1, [address_line2] = @address_line2, [address_line3] = @address_line3, [address_line4] = @address_line4, [address_line5] = @address_line5, [address_post_code] = @address_post_code, [address_full] = @address_full, [telephone1] = @telephone1, [telephone2] = @telephone2, [fax] = @fax, [cell_number] = @cell_number, [created_by] = @created_by, [date_created] = @date_created, [last_amended_by] = @last_amended_by, [date_last_amended] = @date_last_amended, [town] = @town, [county] = @county, [country] = @country WHERE (([address_id] = @Original_address_id));
	
SELECT address_id, flg_deleted, entity_id, flg_same_as_customer, flg_same_as_billing, multi_add_type, address_name, address_no, address_line1, address_line2, address_line3, address_line4, address_line5, address_post_code, address_full, telephone1, telephone2, fax, cell_number, created_by, date_created, last_amended_by, date_last_amended, town, county, country FROM un_entity_details_multi_add WHERE (address_id = @address_id)
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.AddressUpdate')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.CallMeDelete
(
	@Original_call_me_id int
)
AS
	SET NOCOUNT OFF;
DELETE FROM [un_call_me_page] WHERE (([call_me_id] = @Original_call_me_id))
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.CallMeDelete')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[CallMeInsert]
(
	@name_forename varchar(60),
	@name_surname varchar(60),
	@telephone varchar(30),
	@cell_number varchar(30),
	@email varchar(60),
	@company_name varchar(60),
	@company_website varchar(60),
	@postal_adress varchar(255),
	@postal_code varchar(9),
	@comments varchar(1000),
	@flg_view_demo bit,
	@flg_receive_mails bit
)
AS
	SET NOCOUNT OFF;
INSERT INTO [un_call_me_page] ([name_forename], [name_surname], [telephone], [cell_number], [email], [company_name], [company_website], [postal_adress], [postal_code], [comments], [flg_view_demo],[flg_receive_emails]) 
VALUES (@name_forename, @name_surname, @telephone, @cell_number, @email, @company_name, @company_website, @postal_adress, @postal_code, @comments, @flg_view_demo,@flg_receive_mails);
	
SELECT * FROM un_call_me_page WHERE (call_me_id = SCOPE_IDENTITY())
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.CallMeInsert')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.CallMeProductDelete
(
	@Original_call_me_id int,
	@Original_product_name varchar(100)
)
AS
	SET NOCOUNT OFF;
DELETE FROM [un_call_me_products] WHERE (([call_me_id] = @Original_call_me_id) AND ([product_name] = @Original_product_name))
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.CallMeProductDelete')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.CallMeProductInsert
(
	@call_me_id int,
	@product_name varchar(100)
)
AS
	SET NOCOUNT OFF;
INSERT INTO [un_call_me_products] ([call_me_id], [product_name]) VALUES (@call_me_id, @product_name);
	
SELECT call_me_id, product_name FROM un_call_me_products WHERE (call_me_id = @call_me_id) AND (product_name = @product_name)
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.CallMeProductInsert')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.CallMeProductSelect
AS
	SET NOCOUNT ON;
SELECT        un_call_me_products.*
FROM            un_call_me_products
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.CallMeProductSelect')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.CallMeProductUpdate
(
	@call_me_id int,
	@product_name varchar(100),
	@Original_call_me_id int,
	@Original_product_name varchar(100)
)
AS
	SET NOCOUNT OFF;
UPDATE [un_call_me_products] SET [call_me_id] = @call_me_id, [product_name] = @product_name WHERE (([call_me_id] = @Original_call_me_id) AND ([product_name] = @Original_product_name));
	
SELECT call_me_id, product_name FROM un_call_me_products WHERE (call_me_id = @call_me_id) AND (product_name = @product_name)
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.CallMeProductUpdate')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[CallMeSelect]
	@flg_view_demo bit
AS
	SET NOCOUNT ON;
SELECT        un_call_me_page.*
FROM            un_call_me_page
WHERE	flg_view_demo = @flg_view_demo
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.CallMeSelect')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.CallMeUpdate
(
	@name_forename varchar(60),
	@name_surname varchar(60),
	@telephone varchar(30),
	@cell_number varchar(30),
	@email varchar(60),
	@company_name varchar(60),
	@company_website varchar(60),
	@postal_adress varchar(255),
	@postal_code varchar(9),
	@comments varchar(1000),
	@flg_view_demo bit,
	@Original_call_me_id int,
	@call_me_id int
)
AS
	SET NOCOUNT OFF;
UPDATE [un_call_me_page] SET [name_forename] = @name_forename, [name_surname] = @name_surname, [telephone] = @telephone, [cell_number] = @cell_number, [email] = @email, [company_name] = @company_name, [company_website] = @company_website, [postal_adress] = @postal_adress, [postal_code] = @postal_code, [comments] = @comments, [flg_view_demo] = @flg_view_demo WHERE (([call_me_id] = @Original_call_me_id));
	
SELECT call_me_id, name_forename, name_surname, telephone, cell_number, email, company_name, company_website, postal_adress, postal_code, comments, flg_view_demo FROM un_call_me_page WHERE (call_me_id = @call_me_id)
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.CallMeUpdate')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[CustomerSelectByEmail]
	@email varchar(60)
AS
	SET NOCOUNT ON;
SELECT        un_entity_details_core.*
FROM            un_entity_details_core
WHERE			email = @email 

GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.CustomerSelectByEmail')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[CustomerUpdatePassword]
(
	@logon_enable varchar(50),
	@Original_entity_id int,
	@entity_id int
)
AS
	SET NOCOUNT OFF;
UPDATE [un_entity_details_core] SET [logon_enable] = @logon_enable WHERE (([entity_id] = @Original_entity_id));
	
SELECT * FROM un_entity_details_core WHERE (entity_id = @entity_id)
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.CustomerUpdatePassword')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.ProductDelete
(
	@Original_product_id int
)
AS
	SET NOCOUNT OFF;
DELETE FROM [un_products] WHERE (([product_id] = @Original_product_id))
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.ProductDelete')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.ProductDetailDelete
(
	@Original_product_detail_id int
)
AS
	SET NOCOUNT OFF;
DELETE FROM [un_product_details] WHERE (([product_detail_id] = @Original_product_detail_id))
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.ProductDetailDelete')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.ProductDetailInsert
(
	@product_id int,
	@product_detail varchar(100),
	@mandatory bit,
	@sort_order int
)
AS
	SET NOCOUNT OFF;
INSERT INTO [un_product_details] ([product_id], [product_detail], [mandatory], [sort_order]) VALUES (@product_id, @product_detail, @mandatory, @sort_order);
	
SELECT product_detail_id, product_id, product_detail, mandatory, sort_order FROM un_product_details WHERE (product_detail_id = SCOPE_IDENTITY())
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.ProductDetailInsert')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[ProductDetailSelect]
	@ProductId int,
	@Mandatory bit
AS
	SET NOCOUNT ON;
SELECT        un_product_details.*
FROM            un_product_details
where product_id = @ProductId
and mandatory = @Mandatory
order by sort_order
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.ProductDetailSelect')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.ProductDetailUpdate
(
	@product_id int,
	@product_detail varchar(100),
	@mandatory bit,
	@sort_order int,
	@Original_product_detail_id int,
	@product_detail_id int
)
AS
	SET NOCOUNT OFF;
UPDATE [un_product_details] SET [product_id] = @product_id, [product_detail] = @product_detail, [mandatory] = @mandatory, [sort_order] = @sort_order WHERE (([product_detail_id] = @Original_product_detail_id));
	
SELECT product_detail_id, product_id, product_detail, mandatory, sort_order FROM un_product_details WHERE (product_detail_id = @product_detail_id)
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.ProductDetailUpdate')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.ProductInsert
(
	@name varchar(100),
	@description varchar(100),
	@short_name varchar(20)
)
AS
	SET NOCOUNT OFF;
INSERT INTO [un_products] ([name], [description], [short_name]) VALUES (@name, @description, @short_name);
	
SELECT product_id, name, description, short_name FROM un_products WHERE (product_id = SCOPE_IDENTITY())
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.ProductInsert')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.ProductPriceDelete
(
	@Original_version_id int,
	@Original_product_detail_id int
)
AS
	SET NOCOUNT OFF;
DELETE FROM [un_product_prices] WHERE (([version_id] = @Original_version_id) AND ([product_detail_id] = @Original_product_detail_id))
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.ProductPriceDelete')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.ProductPriceInsert
(
	@version_id int,
	@product_detail_id int,
	@price float,
	@text varchar(50)
)
AS
	SET NOCOUNT OFF;
INSERT INTO [un_product_prices] ([version_id], [product_detail_id], [price], [text]) VALUES (@version_id, @product_detail_id, @price, @text);
	
SELECT version_id, product_detail_id, price, text FROM un_product_prices WHERE (product_detail_id = @product_detail_id) AND (version_id = @version_id)
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.ProductPriceInsert')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[ProductPriceSelect]
	@VersionId int,
	@ProductDetailId int
AS
	SET NOCOUNT ON;
SELECT        un_product_prices.*
FROM            un_product_prices
where version_id = @VersionId
and product_detail_id = @ProductDetailId
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.ProductPriceSelect')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.ProductPriceUpdate
(
	@version_id int,
	@product_detail_id int,
	@price float,
	@text varchar(50),
	@Original_version_id int,
	@Original_product_detail_id int
)
AS
	SET NOCOUNT OFF;
UPDATE [un_product_prices] SET [version_id] = @version_id, [product_detail_id] = @product_detail_id, [price] = @price, [text] = @text WHERE (([version_id] = @Original_version_id) AND ([product_detail_id] = @Original_product_detail_id));
	
SELECT version_id, product_detail_id, price, text FROM un_product_prices WHERE (product_detail_id = @product_detail_id) AND (version_id = @version_id)
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.ProductPriceUpdate')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.ProductSelect
AS
	SET NOCOUNT ON;
SELECT        un_products.*
FROM            un_products
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.ProductSelect')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.ProductUpdate
(
	@name varchar(100),
	@description varchar(100),
	@short_name varchar(20),
	@Original_product_id int,
	@product_id int
)
AS
	SET NOCOUNT OFF;
UPDATE [un_products] SET [name] = @name, [description] = @description, [short_name] = @short_name WHERE (([product_id] = @Original_product_id));
	
SELECT product_id, name, description, short_name FROM un_products WHERE (product_id = @product_id)
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.ProductUpdate')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.ProductVersionDelete
(
	@Original_version_id int
)
AS
	SET NOCOUNT OFF;
DELETE FROM [un_product_versions] WHERE (([version_id] = @Original_version_id))
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.ProductVersionDelete')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.ProductVersionInsert
(
	@product_id int,
	@name varchar(50),
	@min_users tinyint,
	@min_months tinyint
)
AS
	SET NOCOUNT OFF;
INSERT INTO [un_product_versions] ([product_id], [name], [min_users], [min_months]) VALUES (@product_id, @name, @min_users, @min_months);
	
SELECT version_id, product_id, name, min_users, min_months FROM un_product_versions WHERE (version_id = SCOPE_IDENTITY())
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.ProductVersionInsert')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[ProductVersionSelect]
	@ProductId int
AS
	SET NOCOUNT ON;
SELECT        un_product_versions.*
FROM            un_product_versions
WHERE	un_product_versions.product_id = @ProductId
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.ProductVersionSelect')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.ProductVersionUpdate
(
	@product_id int,
	@name varchar(50),
	@min_users tinyint,
	@min_months tinyint,
	@Original_version_id int,
	@version_id int
)
AS
	SET NOCOUNT OFF;
UPDATE [un_product_versions] SET [product_id] = @product_id, [name] = @name, [min_users] = @min_users, [min_months] = @min_months WHERE (([version_id] = @Original_version_id));
	
SELECT version_id, product_id, name, min_users, min_months FROM un_product_versions WHERE (version_id = @version_id)
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.ProductVersionUpdate')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.WishListDelete
(
	@Original_wish_list_id int
)
AS
	SET NOCOUNT OFF;
DELETE FROM [un_wish_list] WHERE (([wish_list_id] = @Original_wish_list_id))
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.WishListDelete')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.WishListInsert
(
	@user_id int,
	@product_id int,
	@quantity tinyint,
	@price float,
	@total float
)
AS
	SET NOCOUNT OFF;
INSERT INTO [un_wish_list] ([user_id], [product_id], [quantity], [price], [total]) VALUES (@user_id, @product_id, @quantity, @price, @total);
	
SELECT wish_list_id, user_id, product_id, quantity, price, total FROM un_wish_list WHERE (wish_list_id = SCOPE_IDENTITY())
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.WishListInsert')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[WishListSelect]
	@user_id int
AS
	SET NOCOUNT ON;
SELECT        un_wish_list.*
FROM            un_wish_list
WHERE user_id =@user_id
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.WishListSelect')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE dbo.WishListUpdate
(
	@user_id int,
	@product_id int,
	@quantity tinyint,
	@price float,
	@total float,
	@Original_wish_list_id int,
	@wish_list_id int
)
AS
	SET NOCOUNT OFF;
UPDATE [un_wish_list] SET [user_id] = @user_id, [product_id] = @product_id, [quantity] = @quantity, [price] = @price, [total] = @total WHERE (([wish_list_id] = @Original_wish_list_id));
	
SELECT wish_list_id, user_id, product_id, quantity, price, total FROM un_wish_list WHERE (wish_list_id = @wish_list_id)
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add stored procedure dbo.WishListUpdate')
END
GO
SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON
GO

IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
if not exists (select * from sys.objects where [name] = N'PK_un_products' and [type] = 'PK')
ALTER TABLE [dbo].[un_products] ADD 
	CONSTRAINT [PK_un_products] PRIMARY KEY CLUSTERED 
	(
		[product_id]
	) ON [PRIMARY];
GO

IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add primary key dbo.un_products.PK_un_products')
END
GO
IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
if not exists (select * from sys.objects where [name] = N'PK_un_product_prices' and [type] = 'PK')
ALTER TABLE [dbo].[un_product_prices] ADD 
	CONSTRAINT [PK_un_product_prices] PRIMARY KEY CLUSTERED 
	(
		[version_id],[product_detail_id]
	) ON [PRIMARY];
GO

IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add primary key dbo.un_product_prices.PK_un_product_prices')
END
GO
IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
if not exists (select * from sys.objects where [name] = N'PK_un_call_me_page' and [type] = 'PK')
ALTER TABLE [dbo].[un_call_me_page] ADD 
	CONSTRAINT [PK_un_call_me_page] PRIMARY KEY CLUSTERED 
	(
		[call_me_id]
	) ON [PRIMARY];
GO

IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add primary key dbo.un_call_me_page.PK_un_call_me_page')
END
GO
IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
if not exists (select * from sys.objects where [name] = N'PK_un_wish_list_2' and [type] = 'PK')
ALTER TABLE [dbo].[un_wish_list] ADD 
	CONSTRAINT [PK_un_wish_list_2] PRIMARY KEY CLUSTERED 
	(
		[wish_list_id]
	) ON [PRIMARY];
GO

IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add primary key dbo.un_wish_list.PK_un_wish_list_2')
END
GO
IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
if not exists (select * from sys.objects where [name] = N'PK_un_product_versions' and [type] = 'PK')
ALTER TABLE [dbo].[un_product_versions] ADD 
	CONSTRAINT [PK_un_product_versions] PRIMARY KEY CLUSTERED 
	(
		[version_id]
	) ON [PRIMARY];
GO

IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add primary key dbo.un_product_versions.PK_un_product_versions')
END
GO
IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
if not exists (select * from sys.objects where [name] = N'PK_adddress' and [type] = 'PK')
ALTER TABLE [dbo].[un_entity_details_multi_add] ADD 
	CONSTRAINT [PK_adddress] PRIMARY KEY CLUSTERED 
	(
		[address_id]
	) ON [PRIMARY];
GO

IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add primary key dbo.un_entity_details_multi_add.PK_adddress')
END
GO
IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
if not exists (select * from sys.objects where [name] = N'PK_test' and [type] = 'PK')
ALTER TABLE [dbo].[un_entity_details_core] ADD 
	CONSTRAINT [PK_test] PRIMARY KEY CLUSTERED 
	(
		[entity_id]
	) ON [PRIMARY];
GO

IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add primary key dbo.un_entity_details_core.PK_test')
END
GO
IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
if not exists (select * from sys.objects where [name] = N'PK_un_call_me_product' and [type] = 'PK')
ALTER TABLE [dbo].[un_call_me_products] ADD 
	CONSTRAINT [PK_un_call_me_product] PRIMARY KEY CLUSTERED 
	(
		[call_me_id],[product_name]
	) ON [PRIMARY];
GO

IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add primary key dbo.un_call_me_products.PK_un_call_me_product')
END
GO
IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
if not exists (select * from sys.objects where [name] = N'PK_un_exchange_rates' and [type] = 'PK')
ALTER TABLE [dbo].[un_exchange_rates] ADD 
	CONSTRAINT [PK_un_exchange_rates] PRIMARY KEY CLUSTERED 
	(
		[country_code],[rate_time]
	) ON [PRIMARY];
GO

IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add primary key dbo.un_exchange_rates.PK_un_exchange_rates')
END
GO
IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
if not exists (select * from sys.objects where [name] = N'PK_un_product_details' and [type] = 'PK')
ALTER TABLE [dbo].[un_product_details] ADD 
	CONSTRAINT [PK_un_product_details] PRIMARY KEY CLUSTERED 
	(
		[product_detail_id]
	) ON [PRIMARY];
GO

IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add primary key dbo.un_product_details.PK_un_product_details')
END
GO
IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
if not exists (select * from sys.objects where [name] = N'FK_un_product_versions_un_products' and [type] = 'F')
ALTER TABLE [dbo].[un_product_versions] ADD 
	CONSTRAINT [FK_un_product_versions_un_products] FOREIGN KEY 
	(
		[product_id]
	)REFERENCES [dbo].[un_products](
		[product_id]
	)ON UPDATE NO ACTION ON DELETE NO ACTION 
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add foreign key dbo.un_product_versions.FK_un_product_versions_un_products')
END
GO
IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
if not exists (select * from sys.objects where [name] = N'FK_un_product_details_un_products' and [type] = 'F')
ALTER TABLE [dbo].[un_product_details] ADD 
	CONSTRAINT [FK_un_product_details_un_products] FOREIGN KEY 
	(
		[product_id]
	)REFERENCES [dbo].[un_products](
		[product_id]
	)ON UPDATE NO ACTION ON DELETE NO ACTION 
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add foreign key dbo.un_product_details.FK_un_product_details_un_products')
END
GO
IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
if not exists (select * from sys.objects where [name] = N'FK_un_product_prices_un_product_details' and [type] = 'F')
ALTER TABLE [dbo].[un_product_prices] ADD 
	CONSTRAINT [FK_un_product_prices_un_product_details] FOREIGN KEY 
	(
		[product_detail_id]
	)REFERENCES [dbo].[un_product_details](
		[product_detail_id]
	)ON UPDATE NO ACTION ON DELETE NO ACTION 
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add foreign key dbo.un_product_prices.FK_un_product_prices_un_product_details')
END
GO
IF @@TRANCOUNT=0 BEGIN TRANSACTION
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
if not exists (select * from sys.objects where [name] = N'FK_un_product_prices_un_product_versions' and [type] = 'F')
ALTER TABLE [dbo].[un_product_prices] ADD 
	CONSTRAINT [FK_un_product_prices_un_product_versions] FOREIGN KEY 
	(
		[version_id]
	)REFERENCES [dbo].[un_product_versions](
		[version_id]
	)ON UPDATE NO ACTION ON DELETE NO ACTION 
GO
IF @@ERROR<>0 
Begin
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
	INSERT INTO #ErrorLog (errno,errdescr) values(@@ERROR,'Failed to add foreign key dbo.un_product_prices.FK_un_product_prices_un_product_versions')
END
GO
IF EXISTS (Select * from #ErrorLog)
BEGIN
	IF @@TRANCOUNT>0 ROLLBACK TRANSACTION
END
ELSE
BEGIN
	IF @@TRANCOUNT>0 COMMIT TRANSACTION
END
IF EXISTS (Select * from #ErrorLog)
BEGIN
	Print 'Database synchronization script failed'
	GOTO QuitWithErrors
END
ELSE
BEGIN
	Print 'Database synchronization completed successfully'
END



QuitWithErrors:


